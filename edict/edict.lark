start: header statements

header: header_directive*

// Directives are function calls that can be evaluated before running.
// They may affect the structure of the program
// Header directives establish some context for the program
// Inline directives have no scope and generally expand to some code.
header_directive: "@" _directive
inline_directive: "@@" _directive
_directive: CNAME ( "(" ( _expression "," )* _expression? ")" )?

statements: _statement*
_statement: rule | assignment | bare_expression | inline_directive

rule: "if" rule_ifthen ( "elif" rule_ifthen )* rule_else? "fi"
rule_ifthen: _expression "then" statements
rule_else: "else" statements

// The record values processed by edict are represented as strings
// However, expressions in the edict language have a simple type system used for
// operator overloading.
// Possible types: string, number, boolean, pattern
// Record values are cast to/from other types automatically.
// Ambiguities are resolved in favour of strings.

literal: QUOTED_STRING | NUMBER | REGEX_STRING | _boolean
identifier: CNAME | BRACED_IDENTIFIER

_atom: literal | identifier | "(" _expression ")"

_primary: _atom | call
call: CNAME "(" ( _expression "," )* _expression? ")"

// Unary expression
// - :: Numeric negation
// + :: Numeric identity
u_expr: _primary | PLUSMINUS u_expr

// Multiplication priority expression
m_expr: u_expr | m_expr ( STAR | SLASH | PCT ) u_expr

// Addition priority expression
a_expr: m_expr | a_expr ( PLUSMINUS | DOT ) m_expr

// Comparison expression
comp_expr: a_expr | a_expr _comparison_op a_expr | a_expr MATCH literal

// Logical not
not_expr: comp_expr | BANG not_expr
// Logical and
and_expr: not_expr ( "&" not_expr )*
// Logical or
// At least one term but the first can optionally start with an operator
or_expr: "|"? and_expr ( "|" and_expr )*

_expression: or_expr

// Expression as a statement
bare_expression: call

assignment: identifier "=" _expression
_assignments: assignment*

// Tokens
// ======
// %import common.CNAME
CNAME: /[^\W\d]\w*/

// Quoted string and identifier string escape sequences
// \\ => \
// \} => }
// \a => ASCII bell
// \b => ASCII backspace
// \f => ASCII form feed
// \n => ASCII line feed
// \r => ASCII carriage return
// \t => ASCII horizontal tab
// \v => ASCII vertical tab
// \xhh => Character with hex value hh
// \uxxxx => Character with 16-bit hex value xxxx
// \Uxxxxxx => Character with 32-bit hex value xxxxxx
// TODO: Prevent from crossing line boundaries
QUOTED_STRING: "\"" /(?:[^"\\]|\\.)*/ "\""
BRACED_IDENTIFIER: "{" /(?:[^\/}]|\\.)*/ "}"
// Regex string escape sequences: \/ => / (plus all python regex escapes)
REGEX_STRING: "/" /(?:[^\/\\]|\\.)*/ "/"

// %import common.NUMBER
NUMBER: /[-+]?\d+(\.\d*)?/
_boolean: TRUE | FALSE
FALSE.2: "false"
TRUE.2: "true"

PLUSMINUS: PLUS | MINUS
PLUS: "+"
MINUS: "-"
BANG: "!"
DOT: "."
STAR: "*"
SLASH: "/"
PCT: "%"

_comparison_op: EQ | NE | LT | LE | GT | GE
EQ: "=="
NE: "!="
LT: "<"
LE: "<="
GT: ">"
GE: ">="

MATCH: "~"

// Ignores
// %import common.WS
WS.-1: /\s+/
%ignore WS

COMMENT: /#[^\n]*/
%ignore COMMENT
